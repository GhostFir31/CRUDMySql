/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.crudmysql;


import java.sql.*;
import javax.swing.*;
/**
 *
 * @author omar-
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        cargarDatosEnLista();
    }
    
    private int indice;
    
    
    public int getIndice(){
     return indice;
    }
    
    public void setIndice(int id){
     indice=id;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fondo = new javax.swing.JPanel();
        Titulo = new javax.swing.JLabel();
        botonAgregarPersona = new javax.swing.JButton();
        botonEditarDatos = new javax.swing.JButton();
        botonBorrarPersona = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaPersonas = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Fondo.setBackground(new java.awt.Color(255, 255, 255));
        Fondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Titulo.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        Titulo.setText("Inventario de Personal");
        Fondo.add(Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, -10, 250, 80));

        botonAgregarPersona.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        botonAgregarPersona.setText("Agregar Persona");
        botonAgregarPersona.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        botonAgregarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarPersonaActionPerformed(evt);
            }
        });
        Fondo.add(botonAgregarPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 120, 30));

        botonEditarDatos.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        botonEditarDatos.setText("Editar Datos");
        botonEditarDatos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        botonEditarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarDatosActionPerformed(evt);
            }
        });
        Fondo.add(botonEditarDatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 120, 30));

        botonBorrarPersona.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        botonBorrarPersona.setText("Borrar Persona");
        botonBorrarPersona.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        botonBorrarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarPersonaActionPerformed(evt);
            }
        });
        Fondo.add(botonBorrarPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 120, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ListaPersonas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ListaPersonas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListaPersonasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListaPersonas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );

        Fondo.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 450, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fondo, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Método para cargar los datos desde la base de datos en el JList existente
    private void cargarDatosEnLista() {
        try {
            String sql = "SELECT p.id, p.nombre, p.direccion, t.telefono FROM personas p " +
                         "LEFT JOIN telefonos t ON p.id = t.persona_id";
            
            ConexionMysql conexion = new ConexionMysql();
            
            Connection con = conexion.getConexion();
            
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Crear un modelo de lista dinámico
            DefaultListModel<String> modeloLista = new DefaultListModel<>();

            while (rs.next()) {
                String datos = "ID: " + rs.getInt("id") +
                               " | " + rs.getString("nombre") +
                               " | " + rs.getString("direccion") +
                               " | " + rs.getString("telefono");
                modeloLista.addElement(datos);
            }
            // Asignar el modelo a tu JList existente
            ListaPersonas.setModel(modeloLista);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al obtener datos: " + e.getMessage());
        }
    }

    
    
    private void botonAgregarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarPersonaActionPerformed
    VentanaAgregarPersona ventanaPersonaNueva = new VentanaAgregarPersona();
    ventanaPersonaNueva.setVisible(true);
    ventanaPersonaNueva.setLocationRelativeTo(null);

    // Agregar un WindowListener para detectar cuando se cierra la ventana
    ventanaPersonaNueva.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosed(java.awt.event.WindowEvent e) {
            cargarDatosEnLista(); // Ejecutar cuando se cierre la ventana
        }
    });
    }//GEN-LAST:event_botonAgregarPersonaActionPerformed

    private void botonEditarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarDatosActionPerformed
    // Asegurarnos de que hay algo seleccionado en la lista
    int index = ListaPersonas.getSelectedIndex();
    if (index != -1) {
        // Obtener el texto del elemento seleccionado en la lista
        String seleccionado = ListaPersonas.getModel().getElementAt(index);

        // Separar los valores (asumiendo formato: "ID: 1 | Nombre | Dirección | Teléfono")
        String[] datos = seleccionado.split("\\|");

        // Extraer y limpiar los datos
        String idStr = datos[0].trim().replace("ID:", "").trim(); // "1"
        int id = Integer.parseInt(idStr); // Este es el verdadero ID

        String nombre = datos[1].trim();  // Nombre
        String direccion = datos[2].trim(); // Dirección
        String telefono = datos[3].trim();  // Teléfono

        // Crear el objeto Persona con los datos obtenidos
        Persona persona = new Persona(id, nombre, direccion, telefono);
        
        VentanaEditarPersona ventanaPersona = new VentanaEditarPersona(persona);
        ventanaPersona.setVisible(true);
        ventanaPersona.setLocationRelativeTo(null);
    
        // Agregar un WindowListener para detectar cuando se cierra la ventana
        ventanaPersona.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                cargarDatosEnLista(); // Ejecutar cuando se cierre la ventana
            }
        });
    } else {
        JOptionPane.showMessageDialog(this, "⚠️ Debes seleccionar una persona primero.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_botonEditarDatosActionPerformed

    private void botonBorrarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarPersonaActionPerformed
        
     ConexionMysql con = new ConexionMysql();
     con.eliminarPersona(indice);
     cargarDatosEnLista();
     
    }//GEN-LAST:event_botonBorrarPersonaActionPerformed

    private void ListaPersonasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListaPersonasMouseClicked
    // Obtener el índice seleccionado
    int index = ListaPersonas.getSelectedIndex();

    // Verificar si se seleccionó un elemento
    if (index != -1) {
        // Obtener el texto del elemento seleccionado
        String seleccionado = ListaPersonas.getModel().getElementAt(index);

        // Extraer el ID (asumiendo formato: "ID: 1 | Nombre | Dirección | Teléfono")
        String[] partes = seleccionado.split("\\|");

        if (partes.length > 0) {
            // Extraer solo la parte del ID (Ejemplo: "ID: 1")
            String idStr = partes[0].trim(); 
            
            // Asegurarse de que contiene "ID: " y extraer el número
            if (idStr.startsWith("ID:")) {
                String id = idStr.replace("ID:", "").trim(); // Eliminar "ID:" y espacios
                
                try {
                    // Convertir el ID a un entero
                    int idPersona = Integer.parseInt(id);
                    
                    // Guardar el ID en la variable 'indice'
                    setIndice(idPersona);

                    // Mostrar un mensaje emergente con el ID
                   // JOptionPane.showMessageDialog(this, "ID seleccionado: " + idPersona, "Información", JOptionPane.INFORMATION_MESSAGE);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Error al convertir el ID.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Formato de ID incorrecto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }  
    }//GEN-LAST:event_ListaPersonasMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Fondo;
    private javax.swing.JList<String> ListaPersonas;
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton botonAgregarPersona;
    private javax.swing.JButton botonBorrarPersona;
    private javax.swing.JButton botonEditarDatos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
